package com.fireworks.screens;
import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.ApplicationListener;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Screen;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
public class MainScreen implements Screen, ApplicationListener {
	SpriteBatch batch; // объект для отрисовки спрайтов нашей игры
	OrthographicCamera camera; // область просмотра нашей игры
	Texture startButtonTexture;
	Texture exitButtonTexture;
	Texture backGroundTexture;
	Sprite startButtonSprite;
	Sprite exitButtonSprite;
	Sprite backGroundSprite;
	private static float BUTTON_RESIZE_FACTOR = 800f; // задаём относительный размер
	private static float START_VERT_POSITION_FACTOR = 2.7f; // задаём позицию конпки start
	private static float EXIT_VERT_POSITION_FACTOR = 4.2f; // задаём позицию кнопки exit
public MainScreen(){
	// получаем размеры экрана устройства пользователя и записываем их в переменнные высоты и ширины
	float height= Gdx.graphics.getHeight();
	float width = Gdx.graphics.getWidth();
	// устанавливаем переменные высоты и ширины в качестве области просмотра нашей игры
	camera = new OrthographicCamera(width,height);
	// этим методом мы центруем камеру на половину высоты и половину ширины
	camera.setToOrtho(false);
	batch = new SpriteBatch();
	// инициализируем текстуры и спрайты
	startButtonTexture = new Texture(Gdx.files.internal("button_play.png"));
	exitButtonTexture = new Texture(Gdx.files.internal("button_exit.png"));
	backGroundTexture = new Texture(Gdx.files.internal("background.jpg"));
	startButtonSprite = new Sprite(startButtonTexture);
	exitButtonSprite = new Sprite(exitButtonTexture);
	backGroundSprite = new Sprite(backGroundTexture);
	// устанавливаем размер и позиции
	startButtonSprite.setSize(startButtonSprite.getWidth() *(width/BUTTON_RESIZE_FACTOR), startButtonSprite.getHeight()*(width/BUTTON_RESIZE_FACTOR));
	exitButtonSprite.setSize(exitButtonSprite.getWidth() *(width/BUTTON_RESIZE_FACTOR), exitButtonSprite.getHeight()*(width/BUTTON_RESIZE_FACTOR));
	backGroundSprite.setSize(width,height);
	startButtonSprite.setPosition((width/2f -startButtonSprite.getWidth()/2) , width/START_VERT_POSITION_FACTOR);
	exitButtonSprite.setPosition((width/2f -exitButtonSprite.getWidth()/2) , width/EXIT_VERT_POSITION_FACTOR);
	// устанавливаем прозрачность заднего фона
	backGroundSprite.setAlpha(0.2f);
}
	@Override
	public void show() {}
	@Override
	public void render(float delta) {
		// Очищаем экран
		Gdx.gl.glClearColor(1, 1, 1, 1);
		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
		batch.setProjectionMatrix(camera.combined);// устанавливаем в экземпляр spritebatch вид с камеры (области просмотра)
		//отрисовка игровых объектов
		batch.begin();
		backGroundSprite.draw(batch);
		startButtonSprite.draw(batch);
		exitButtonSprite.draw(batch);
		batch.end();
	}
	@Override
	public void create() {}
	@Override
	public void resize(int width, int height) {}
	@Override
	public void render() { }
	@Override
	public void pause() { }
	@Override
	public void resume() { }
	@Override
	public void hide() { }
	@Override
	public void dispose() {
		startButtonTexture.dispose();
		exitButtonTexture.dispose();
		batch.dispose();
	}
}
